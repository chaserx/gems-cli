#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'gems-cli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/gems-cli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/gems-cli now"
  exit 64
end

include GLI::App

program_desc 'Interact with Rubygems.org from the command line'

version GemsCli::VERSION

# Use argument validation
arguments :strict

desc 'search'
switch [:s,:switch]

desc 'Search Rubygems.org for a gem'
arg_name 'Describe arguments to search here'
command :search do |c|
  c.desc 'Describe a switch to search'
  c.switch :s

  c.desc 'number of results returned'
  c.default_value 10
  c.flag :n
  c.action do |global_options,options,args|

    # Your command logic here

    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "running search for #{args[0]}..."
    search_results = Gems.search args[0]
    per_page = 10
    iteration = 0
    search_results.paginate(per_page: per_page).each do |result|
      puts "#{iteration}: gem '#{result['name']}', '~> #{result['version']}'"
      iteration += 1
    end
    choices = "select from 0..9, n(ext), or q(uit)"
    answer = ask("#{choices} ", String) do |q|
               q.echo      = false
               q.case      = :downcase
               q.character = false
               q.validate  = /\A[0-9]|n|q\Z/
             end

    case answer
    when ("0".."9").cover?(answer)
      say answer
    when 'n'
      say answer
    when 'q'
      say 'bye bye'
    else
      say 'unknown option'
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
