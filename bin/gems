#!/usr/bin/env ruby
require 'gli'
require 'gems-cli'

include GLI::App

program_desc 'Interact with Rubygems.org from the command line. Yay!'

version GemsCli::VERSION

# Use argument validation
arguments :strict
subcommand_option_handling :normal

desc 'Search Rubygems.org for a gem'
arg_name 'Name of a gem'
command [:search, :s] do |c|
  c.desc 'Number of results returned per page'
  c.default_value 10
  c.flag :n

  c.action do |global_options,options,args|
    if args[0].nil? || args[0].empty?
      raise ArgumentError, 'Please supply a search term.'
    end

    puts "Running your search for #{args[0]}...".color(:green)

    search_results = Gems.search args[0]
    limit = options[:n].to_i
    paged_results = Paginator.new(ary: search_results, per_page: limit)

    paged_results.first_page.each_with_index do |e, i|
      puts "#{i}: gem '#{e['name']}', '~> #{e['version']}'"
    end

    @answer = ''
    until @answer == 'q'
      puts "\nPage: #{paged_results.page}/#{paged_results.pages}".color(:green)
      choices = "Select from 0..#{paged_results.per_page - 1}, (n)ext, (p)revious, or (q)uit #=> ".color(:green)
      @answer = ask(choices, String) do |q|
                 q.case      = :downcase
                 q.validate  = /\A\d+|q|n|p\Z/
               end

      case @answer
      when /\d+/
        gem_list = paged_results.current_page
        if gem_list[@answer.to_i]
          Clipboard.copy "gem '#{gem_list[@answer.to_i]['name']}', '~> #{gem_list[@answer.to_i]['version']}'"
          puts "Copied #{gem_list[@answer.to_i]['name']} to your clipboard!".color(:green)
        else
          puts "Your choice, #{@answer}, is not in the list 0..#{gem_list.size - 1}"
        end
      when 'n'
        paged_results.next_page.each_with_index do |e, i|
          puts "#{i}: gem '#{e['name']}', '~> #{e['version']}'"
        end
      when 'p'
        paged_results.previous_page.each_with_index do |e, i|
          puts "#{i}: gem '#{e['name']}', '~> #{e['version']}'"
        end
      when 'q'
        puts 'Later.'
      else
        puts "Sorry. Unknown option: #{@answer.chomp}"
      end
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
